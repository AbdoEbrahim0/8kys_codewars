#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <string>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <vector>
#include <regex>
#include <string>
#include <numeric>
#include <stdlib.h>
#include <map>
#include <numeric>
#include<sstream>
#include <set>
using namespace std;
    //method 1:
// int sum(vector<int> numbers)
// { int min,max;
//     min=*min_element(numbers.begin(),numbers.end());
//     max=*max_element(numbers.begin(),numbers.end());
//     int sum=accumulate(numbers.begin(),numbers.end(),0);
//     return sum-min-max;
// }
    //methode 2
// int sum(vector<int> numbers)
// { 
//     if(numbers.size()<=1 ||numbers.empty()) return 0; 
//     // numbers.erase( remove(numbers.begin(),numbers.end(),min)   ); //{ 1, 1, 11, 2, 3  }; it remove all minimum occurance
// //     //you will  get faild at sum mixed if you  use auto min_iterator =.. then  directly auto min_iterator
//       auto max_iterator=max_element(numbers.begin(),numbers.end());
//       numbers.erase( max_iterator );         
//       auto min_iterator=min_element(numbers.begin(),numbers.end());    
//       numbers.erase(min_iterator);
//     int sum=accumulate(numbers.begin(),numbers.end(),0);
//     return sum;
// }
    //methode 3
int sum(vector<int> numbers)
{ 
    if(numbers.size()<=1) return 0; 
      sort(numbers.begin(),numbers.end());
      int sum=accumulate(numbers.begin(),numbers.end(),0);
    return sum-numbers[0]-numbers[numbers.size()-1];
}
int main() {
  
    // vector<int>vvv{ 1, 1, 11, 2, 3  };
    vector<int>vvv {-6 ,-1 ,10 ,-12};

    sum(vvv);    
   return 0;
}
