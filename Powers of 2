#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <string>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <vector>
#include <regex>
#include <string>
#include <numeric>
#include <stdlib.h>
#include <map>
#include <numeric>
#include<sstream>
#include <set>
#include <cstdint>
 using namespace std;
    //method 1:
// std::vector<uint64_t> powers_of_two(int n) {
  
//   vector<uint64_t>vec;
//   for (int i=0;i<=n;i++)
//   {
//     vec.push_back(pow(2,i));
//   }
//   return vec;
// }
//method 2:
// std::vector<uint64_t> powers_of_two(int n) {
//   std::vector<uint64_t> v;
//   uint64_t t = 1;
//   for (int i = 0; i <= n; ++i) {
//     v.push_back(t);
//     t = t << 1;
//   }
//   return v;
// }
//method 3:
// vector<uint64_t> powers_of_two(int n) 
// {
//   vector <uint64_t> powers = {1};
//   uint64_t pow = 1;
//   while(n)
//   {
//     pow *= 2;
//     powers.push_back(pow);
//     n--;
//   }
//   return powers;
// }
//method 4:
// std::vector<uint64_t> powers_of_two(int n) {
//   std::vector<uint64_t> results;
//   for (int i = 0; i <= n; i++)
//     results.emplace_back(pow(2, i));
//   return results;
// }
std::vector<uint64_t> powers_of_two(int n) {
  std::vector<uint64_t> arr(n+1);
  std::generate(arr.begin(), arr.end(), [i=0]() mutable{ return pow(2, i++); });
  return arr;
}
